<div class="dashboard-container">
  <div class="dashboard-header">
    <h2 class="glitch-text">Survivor Dashboard</h2>
    <p class="subtitle" id="char-name">Loading character data...</p>
  </div>

  <div class="dashboard-sections">
    <div class="dashboard-section stats-section">
      <h3>Character Stats</h3>
      <div class="stats-display">
        <div class="stat-bar-container">
          <div class="stat-label">Health</div>
          <div class="stat-bar-wrapper">
            <div class="stat-bar health-bar" id="health-bar"></div>
            <div class="stat-value" id="health-value">--/--</div>
          </div>
        </div>

        <div class="stat-bar-container">
          <div class="stat-label">Energy</div>
          <div class="stat-bar-wrapper">
            <div class="stat-bar energy-bar" id="energy-bar"></div>
            <div class="stat-value" id="energy-value">--/--</div>
          </div>
        </div>

        <div class="stat-bar-container">
          <div class="stat-label">Hunger</div>
          <div class="stat-bar-wrapper">
            <div class="stat-bar hunger-bar" id="hunger-bar"></div>
            <div class="stat-value" id="hunger-value">--%</div>
          </div>
        </div>

        <div class="stat-bar-container">
          <div class="stat-label">Thirst</div>
          <div class="stat-bar-wrapper">
            <div class="stat-bar thirst-bar" id="thirst-bar"></div>
            <div class="stat-value" id="thirst-value">--%</div>
          </div>
        </div>

        <div class="stat-bar-container">
          <div class="stat-label">Radiation</div>
          <div class="stat-bar-wrapper">
            <div class="stat-bar radiation-bar" id="radiation-bar"></div>
            <div class="stat-value" id="radiation-value">--%</div>
          </div>
        </div>

        <div class="attribute-grid">
          <div class="attribute">
            <span class="attribute-label">STR:</span>
            <span class="attribute-value" id="str-value">--</span>
          </div>
          <div class="attribute">
            <span class="attribute-label">AGI:</span>
            <span class="attribute-value" id="agi-value">--</span>
          </div>
          <div class="attribute">
            <span class="attribute-label">END:</span>
            <span class="attribute-value" id="end-value">--</span>
          </div>
          <div class="attribute">
            <span class="attribute-label">INT:</span>
            <span class="attribute-value" id="int-value">--</span>
          </div>
          <div class="attribute">
            <span class="attribute-label">LCK:</span>
            <span class="attribute-value" id="lck-value">--</span>
          </div>
          <div class="attribute">
            <span class="attribute-label">XP:</span>
            <span class="attribute-value" id="exp-value">--</span>
          </div>
        </div>
      </div>
    </div>

    <div class="dashboard-section actions-section">
      <h3>Actions</h3>
      <div class="action-buttons">
        <a href="/scavenge" class="action-button glow-button">Scavenge</a>
        <button class="action-button glow-button" id="rest-btn">Rest</button>
        <button class="action-button glow-button" id="explore-btn">Explore</button>
        <a href="/inventory" class="action-button glow-button">Inventory</a>
        <button class="action-button debug-button" id="debug-btn" style="background-color: #333; font-size: 12px; margin-top: 15px;">Debug Auth</button>
      </div>
    </div>

    <div class="dashboard-section status-section">
      <h3>Status Effects</h3>
      <div class="status-effects" id="status-effects">
        <p class="no-effects">No active effects</p>
      </div>
    </div>
    
    <div class="dashboard-section rest-section hidden" id="rest-section">
      <h3>Resting</h3>
      <div class="rest-info">
        <p>You are resting to recover energy.</p>
        <div class="rest-timer">
          <span>Next energy point in: </span>
          <span id="rest-timer-value">00:00</span>
        </div>
        <div class="energy-gained">
          <span>Energy gained: </span>
          <span id="energy-gained-value">0</span>
        </div>
        <button class="action-button danger-button" id="stop-rest-btn">Stop Resting</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Get elements
    const restBtn = document.getElementById('rest-btn');
    const restSection = document.getElementById('rest-section');
    const stopRestBtn = document.getElementById('stop-rest-btn');
    const restTimerValue = document.getElementById('rest-timer-value');
    const energyGainedValue = document.getElementById('energy-gained-value');
    
    // Rest functionality variables
    let isResting = false;
    let restStartTime = null;
    let restInterval = null;
    let energyGained = 0;
    let lastEnergyGainTime = null;
    
    // Add rest functionality
    restBtn.addEventListener('click', async () => {
      try {
        const character = await getCharacterData();
        
        if (character.energy.current >= character.energy.max) {
          alert('Your energy is already full!');
          return;
        }
        
        // Start resting
        isResting = true;
        restStartTime = Date.now();
        lastEnergyGainTime = restStartTime;
        energyGained = 0;
        
        // Show rest section
        restSection.classList.remove('hidden');
        restBtn.disabled = true;
        
        // Start timer
        restInterval = setInterval(updateRestTimer, 1000);
      } catch (err) {
        console.error('Error starting rest:', err);
      }
    });
    
    // Stop resting
    stopRestBtn.addEventListener('click', () => {
      stopResting();
    });
    
    // Update rest timer
    function updateRestTimer() {
      if (!isResting) return;
      
      const now = Date.now();
      const elapsed = now - lastEnergyGainTime;
      const timeUntilNextPoint = 60000 - elapsed; // 1 minute = 60000ms
      
      if (timeUntilNextPoint <= 0) {
        // Gain energy point
        energyGained++;
        energyGainedValue.textContent = energyGained;
        lastEnergyGainTime = now;
        
        // Update character energy (optimistic update)
        const energyBar = document.getElementById('energy-bar');
        const energyValue = document.getElementById('energy-value');
        
        if (energyBar && energyValue) {
          const [current, max] = energyValue.textContent.split('/').map(Number);
          
          if (!isNaN(current) && !isNaN(max) && current < max) {
            const newEnergy = Math.min(current + 1, max);
            const energyPercentage = (newEnergy / max) * 100;
            
            energyBar.style.width = `${energyPercentage}%`;
            energyValue.textContent = `${newEnergy}/${max}`;
            
            // If energy is full, stop resting
            if (newEnergy >= max) {
              stopResting();
              alert('Your energy is now full!');
              return;
            }
          }
        }
      }
      
      // Update timer display
      const minutes = Math.floor(timeUntilNextPoint / 60000);
      const seconds = Math.floor((timeUntilNextPoint % 60000) / 1000);
      restTimerValue.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    // Stop resting function
    function stopResting() {
      if (!isResting) return;
      
      isResting = false;
      clearInterval(restInterval);
      restSection.classList.add('hidden');
      restBtn.disabled = false;
      
      // Update character data after resting
      if (energyGained > 0) {
        updateCharacterEnergy(energyGained);
      }
    }
    
    // Update character energy on server
    async function updateCharacterEnergy(amount) {
      try {
        await fetch('/api/character/updateEnergy', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ amount })
        });
        
        // Reload character data to get updated stats
        loadCharacterData();
      } catch (err) {
        console.error('Error updating energy:', err);
      }
    }
    
    // Add debug functionality
    document.getElementById('debug-btn').addEventListener('click', async () => {
      try {
        // Check auth token in cookies
        const cookies = document.cookie.split(';').reduce((acc, cookie) => {
          const [key, value] = cookie.trim().split('=');
          acc[key] = value;
          return acc;
        }, {});
        
        const hasToken = !!cookies.token;
        
        // Try to fetch user data
        const authRes = await fetch('/api/auth/me', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });
        
        const authStatus = authRes.ok ? 'Authenticated' : 'Not authenticated';
        const statusCode = authRes.status;
        
        // Try to fetch inventory data
        const invRes = await fetch('/api/inventory', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });
        
        const invStatusCode = invRes.status;
        const invStatus = invRes.ok ? 'Success' : 'Failed';
        
        // Show debug info
        alert(`Auth debug info:
- Token in cookies: ${hasToken ? 'Yes' : 'No'}
- Auth status: ${authStatus} (${statusCode})
- Inventory API: ${invStatus} (${invStatusCode})
        
Try going to the inventory page again now.`);
        
      } catch (err) {
        alert(`Error checking auth: ${err.message}`);
      }
    });
    
    // Function to get character data
    async function getCharacterData() {
      const res = await fetch('/api/character', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });
      
      const data = await res.json();
      
      if (data.success) {
        return data.data;
      } else {
        throw new Error('Failed to load character data');
      }
    }
    
    // Load character data on page load
    loadCharacterData();
    
    async function loadCharacterData() {
      try {
        const character = await getCharacterData();
        
        // Update character name
        document.getElementById('char-name').textContent = character.name;
        
        // Update health bar
        const healthBar = document.getElementById('health-bar');
        const healthPercentage = (character.health.current / character.health.max) * 100;
        healthBar.style.width = `${healthPercentage}%`;
        document.getElementById('health-value').textContent = `${character.health.current}/${character.health.max}`;
        
        // Update energy bar
        const energyBar = document.getElementById('energy-bar');
        const energyPercentage = (character.energy.current / character.energy.max) * 100;
        energyBar.style.width = `${energyPercentage}%`;
        document.getElementById('energy-value').textContent = `${character.energy.current}/${character.energy.max}`;
        
        // Update hunger bar
        const hungerBar = document.getElementById('hunger-bar');
        hungerBar.style.width = `${character.hunger}%`;
        document.getElementById('hunger-value').textContent = `${character.hunger}%`;
        
        // Change hunger bar color based on value
        if (character.hunger < 30) {
          hungerBar.classList.add('critical');
        } else if (character.hunger < 60) {
          hungerBar.classList.add('warning');
        }
        
        // Update thirst bar
        const thirstBar = document.getElementById('thirst-bar');
        thirstBar.style.width = `${character.thirst}%`;
        document.getElementById('thirst-value').textContent = `${character.thirst}%`;
        
        // Change thirst bar color based on value
        if (character.thirst < 30) {
          thirstBar.classList.add('critical');
        } else if (character.thirst < 60) {
          thirstBar.classList.add('warning');
        }
        
        // Update radiation bar
        const radiationBar = document.getElementById('radiation-bar');
        radiationBar.style.width = `${character.radiation}%`;
        document.getElementById('radiation-value').textContent = `${character.radiation}%`;
        
        // Update attributes
        document.getElementById('str-value').textContent = character.stats.strength;
        document.getElementById('agi-value').textContent = character.stats.agility;
        document.getElementById('end-value').textContent = character.stats.endurance;
        document.getElementById('int-value').textContent = character.stats.intelligence;
        document.getElementById('lck-value').textContent = character.stats.luck;
        document.getElementById('exp-value').textContent = character.experience;
        
        // Update status effects
        updateStatusEffects(character);
      } catch (err) {
        console.error('Error loading character data:', err);
      }
    }
    
    // Add event listeners for action buttons
    document.getElementById('explore-btn').addEventListener('click', () => {
      alert('Exploration functionality will be implemented soon!');
    });
  });
  
  // Update status effects based on character condition
  function updateStatusEffects(character) {
    const statusEffectsContainer = document.getElementById('status-effects');
    statusEffectsContainer.innerHTML = '';
    
    const effects = [];
    
    // Check for energy effects
    if (character.energy.current < 20) {
      effects.push({
        name: 'Exhausted',
        description: 'Severely reduced effectiveness in all activities due to extreme fatigue.',
        class: 'effect-critical'
      });
    } else if (character.energy.current < 40) {
      effects.push({
        name: 'Tired',
        description: 'Reduced effectiveness in all activities due to fatigue.',
        class: 'effect-warning'
      });
    }
    
    // Check for hunger effects
    if (character.hunger < 30) {
      effects.push({
        name: 'Starving',
        description: 'Severely reduced stamina and strength due to extreme hunger.',
        class: 'effect-critical'
      });
    } else if (character.hunger < 60) {
      effects.push({
        name: 'Hungry',
        description: 'Reduced stamina due to hunger.',
        class: 'effect-warning'
      });
    }
    
    // Check for thirst effects
    if (character.thirst < 30) {
      effects.push({
        name: 'Dehydrated',
        description: 'Severely reduced stamina and agility due to extreme thirst.',
        class: 'effect-critical'
      });
    } else if (character.thirst < 60) {
      effects.push({
        name: 'Thirsty',
        description: 'Reduced stamina due to thirst.',
        class: 'effect-warning'
      });
    }
    
    // Check for radiation effects
    if (character.radiation > 70) {
      effects.push({
        name: 'Radiation Sickness',
        description: 'Severe radiation poisoning. Health is decreasing rapidly.',
        class: 'effect-critical'
      });
    } else if (character.radiation > 40) {
      effects.push({
        name: 'Irradiated',
        description: 'Moderate radiation poisoning. Decreased endurance and intelligence.',
        class: 'effect-warning'
      });
    } else if (character.radiation > 20) {
      effects.push({
        name: 'Slightly Irradiated',
        description: 'Mild radiation exposure. Slight discomfort.',
        class: 'effect-minor'
      });
    }
    
    // Display effects or "No active effects" message
    if (effects.length > 0) {
      effects.forEach(effect => {
        const effectElement = document.createElement('div');
        effectElement.className = `status-effect ${effect.class}`;
        effectElement.innerHTML = `
          <div class="effect-name">${effect.name}</div>
          <div class="effect-description">${effect.description}</div>
        `;
        statusEffectsContainer.appendChild(effectElement);
      });
    } else {
      statusEffectsContainer.innerHTML = '<p class="no-effects">No active effects</p>';
    }
  }
</script>

<style>
  .energy-bar {
    background: linear-gradient(90deg, #3498db, #2980b9);
  }
  
  .rest-section {
    background-color: #222;
    padding: 15px;
    border-radius: 5px;
  }
  
  .rest-info {
    color: #aaa;
  }
  
  .rest-timer, .energy-gained {
    margin: 10px 0;
    font-size: 1.1em;
  }
  
  #rest-timer-value, #energy-gained-value {
    color: #5aff5a;
    font-weight: bold;
  }
  
  .hidden {
    display: none;
  }
  
  .danger-button {
    background-color: #3a2a2a;
    color: #ff5a5a;
    border: 1px solid #ff5a5a;
    box-shadow: 0 0 5px rgba(255, 90, 90, 0.5);
  }
  
  .danger-button:hover {
    background-color: #2a1a1a;
    box-shadow: 0 0 10px rgba(255, 90, 90, 0.7);
  }
</style> 