<div class="admin-container">
  <div class="admin-header">
    <h2 class="admin-title">Monster Management</h2>
    <p class="subtitle">Manage monsters and their attributes</p>
  </div>

  <div class="admin-nav">
    <ul>
      <li><a href="/admin/dashboard">Dashboard</a></li>
      <li><a href="/admin/monsters" class="active">Monsters</a></li>
      <li><a href="/admin/items">Items</a></li>
      <li><a href="/admin/locations">Locations</a></li>
      <li><a href="/dashboard">Return to Game</a></li>
    </ul>
  </div>

  <div class="admin-content">
    <div class="action-bar">
      <button class="admin-btn" id="save-all-btn">Save All Changes</button>
      <button class="admin-btn" id="add-monster-btn">Add New Monster</button>
      <div class="search-bar">
        <input type="text" id="monster-search" placeholder="Search monsters...">
      </div>
    </div>

    <div class="monsters-list" id="monsters-list">
      <div class="loading">Loading monsters...</div>
    </div>

    <div class="monster-editor" id="monster-editor">
      <div class="editor-placeholder">Select a monster to edit</div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const monstersList = document.getElementById('monsters-list');
    const monsterEditor = document.getElementById('monster-editor');
    const monsterSearch = document.getElementById('monster-search');
    const saveAllBtn = document.getElementById('save-all-btn');
    const addMonsterBtn = document.getElementById('add-monster-btn');
    
    let monsters = [];
    let unsavedChanges = false;
    
    // Load monsters
    try {
      const response = await fetch('/api/admin/monsters');
      const data = await response.json();
      
      if (data.success && data.data) {
        monsters = data.data.monsters || [];
        renderMonstersList();
      } else {
        monstersList.innerHTML = '<div class="error-message">Failed to load monsters</div>';
      }
    } catch (error) {
      console.error('Error loading monsters:', error);
      monstersList.innerHTML = `<div class="error-message">Error loading monsters: ${error.message}</div>`;
    }
    
    // Event listeners
    monsterSearch.addEventListener('input', () => {
      renderMonstersList();
    });
    
    saveAllBtn.addEventListener('click', saveAllMonsters);
    addMonsterBtn.addEventListener('click', createNewMonster);
    
    // Handle unsaved changes
    window.addEventListener('beforeunload', (e) => {
      if (unsavedChanges) {
        e.preventDefault();
        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
        return e.returnValue;
      }
    });
    
    // Render monsters list
    function renderMonstersList() {
      const searchTerm = monsterSearch.value.toLowerCase();
      const filteredMonsters = monsters.filter(monster => 
        monster.name.toLowerCase().includes(searchTerm) || 
        monster.id.toLowerCase().includes(searchTerm)
      );
      
      if (filteredMonsters.length === 0) {
        monstersList.innerHTML = '<div class="no-results">No monsters found</div>';
        return;
      }
      
      let html = '<div class="list-container">';
      
      filteredMonsters.forEach(monster => {
        html += `
          <div class="list-item" data-id="${monster.id}">
            <div class="item-info">
              <div class="item-name">${monster.name}</div>
              <div class="item-meta">ID: ${monster.id} | HP: ${monster.health} | DMG: ${monster.damage}</div>
            </div>
            <div class="item-actions">
              <button class="edit-btn" data-id="${monster.id}">Edit</button>
              <button class="delete-btn" data-id="${monster.id}">Delete</button>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      monstersList.innerHTML = html;
      
      // Add event listeners to buttons
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const monsterId = e.target.getAttribute('data-id');
          editMonster(monsterId);
        });
      });
      
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const monsterId = e.target.getAttribute('data-id');
          deleteMonster(monsterId);
        });
      });
    }
    
    // Edit monster
    function editMonster(monsterId) {
      const monster = monsters.find(m => m.id === monsterId);
      
      if (!monster) {
        alert('Monster not found');
        return;
      }
      
      let html = `
        <div class="editor-header">
          <h3>Editing Monster: ${monster.name}</h3>
          <button class="close-editor-btn">&times;</button>
        </div>
        <div class="editor-form">
          <div class="form-row">
            <label for="monster-id">ID:</label>
            <input type="text" id="monster-id" value="${monster.id}" readonly>
          </div>
          <div class="form-row">
            <label for="monster-name">Name:</label>
            <input type="text" id="monster-name" value="${monster.name}">
          </div>
          <div class="form-row">
            <label for="monster-description">Description:</label>
            <textarea id="monster-description" rows="3">${monster.description || 'A fearsome creature.'}</textarea>
          </div>
          <div class="form-row">
            <label for="monster-image">Image URL:</label>
            <input type="text" id="monster-image" value="${monster.image || '/images/monsters/default.png'}">
          </div>
          
          <div class="stats-section">
            <h4>Combat Stats</h4>
            <div class="form-row">
              <label for="monster-health">Health:</label>
              <input type="number" id="monster-health" value="${monster.health}" min="1">
            </div>
            <div class="form-row">
              <label for="monster-damage">Damage:</label>
              <input type="number" id="monster-damage" value="${monster.damage}" min="1">
            </div>
            <div class="form-row">
              <label for="monster-experience">Experience Reward:</label>
              <input type="number" id="monster-experience" value="${monster.experience || 5}" min="1">
            </div>
          </div>
        </div>
        
        <div class="loot-section">
          <h4>Loot</h4>
          <div class="loot-list" id="loot-list">
      `;
      
      // Add loot
      if (monster.loot && monster.loot.length > 0) {
        monster.loot.forEach((loot, index) => {
          html += `
            <div class="loot-item" data-index="${index}">
              <div class="loot-header">
                <span>Item ID: ${loot.item_id}</span>
                <div class="loot-actions">
                  <button class="edit-loot-btn" data-index="${index}">Edit</button>
                  <button class="delete-loot-btn" data-index="${index}">Delete</button>
                </div>
              </div>
              <div class="loot-details">
                <div>Chance: ${loot.chance}%</div>
              </div>
            </div>
          `;
        });
      } else {
        html += '<div class="no-loot">No loot defined</div>';
      }
      
      html += `
          </div>
          <button class="admin-btn" id="add-loot-btn">Add Loot</button>
        </div>
        
        <div class="editor-actions">
          <button class="admin-btn" id="save-monster-btn">Save Changes</button>
          <button class="cancel-btn" id="cancel-edit-btn">Cancel</button>
        </div>
      `;
      
      monsterEditor.innerHTML = html;
      monsterEditor.classList.add('active');
      
      // Add event listeners
      document.querySelector('.close-editor-btn').addEventListener('click', () => {
        if (unsavedChanges) {
          if (confirm('You have unsaved changes. Discard them?')) {
            monsterEditor.classList.remove('active');
            unsavedChanges = false;
          }
        } else {
          monsterEditor.classList.remove('active');
        }
      });
      
      document.getElementById('cancel-edit-btn').addEventListener('click', () => {
        if (unsavedChanges) {
          if (confirm('You have unsaved changes. Discard them?')) {
            monsterEditor.classList.remove('active');
            unsavedChanges = false;
          }
        } else {
          monsterEditor.classList.remove('active');
        }
      });
      
      document.getElementById('save-monster-btn').addEventListener('click', () => {
        saveMonsterChanges(monsterId);
      });
      
      document.getElementById('add-loot-btn').addEventListener('click', () => {
        addLoot(monsterId);
      });
      
      // Form change detection
      document.querySelectorAll('.editor-form input, .editor-form textarea').forEach(input => {
        input.addEventListener('input', () => {
          unsavedChanges = true;
        });
      });
      
      // Edit loot buttons
      document.querySelectorAll('.edit-loot-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const index = parseInt(e.target.getAttribute('data-index'));
          editLoot(monsterId, index);
        });
      });
      
      // Delete loot buttons
      document.querySelectorAll('.delete-loot-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const index = parseInt(e.target.getAttribute('data-index'));
          deleteLoot(monsterId, index);
        });
      });
    }
    
    // Save monster changes
    function saveMonsterChanges(monsterId) {
      const monster = monsters.find(m => m.id === monsterId);
      
      if (!monster) {
        alert('Monster not found');
        return;
      }
      
      // Get updated values
      monster.name = document.getElementById('monster-name').value;
      monster.description = document.getElementById('monster-description').value;
      monster.image = document.getElementById('monster-image').value;
      monster.health = parseInt(document.getElementById('monster-health').value);
      monster.damage = parseInt(document.getElementById('monster-damage').value);
      monster.experience = parseInt(document.getElementById('monster-experience').value);
      
      // Update UI
      renderMonstersList();
      unsavedChanges = true;
      alert('Monster updated! Remember to click "Save All Changes" to persist your changes.');
    }
    
    // Add loot
    function addLoot(monsterId) {
      const monster = monsters.find(m => m.id === monsterId);
      
      if (!monster) {
        alert('Monster not found');
        return;
      }
      
      const itemId = prompt('Enter item ID:');
      
      if (!itemId) {
        return;
      }
      
      const chance = parseInt(prompt('Enter drop chance (1-100):') || '50');
      
      if (!monster.loot) {
        monster.loot = [];
      }
      
      monster.loot.push({
        item_id: itemId,
        chance: chance
      });
      
      // Refresh editor
      editMonster(monsterId);
      unsavedChanges = true;
    }
    
    // Edit loot
    function editLoot(monsterId, lootIndex) {
      const monster = monsters.find(m => m.id === monsterId);
      
      if (!monster || !monster.loot || !monster.loot[lootIndex]) {
        alert('Loot not found');
        return;
      }
      
      const loot = monster.loot[lootIndex];
      
      const itemId = prompt('Enter item ID:', loot.item_id);
      
      if (!itemId) {
        return;
      }
      
      const chance = parseInt(prompt('Enter drop chance (1-100):', loot.chance) || '50');
      
      monster.loot[lootIndex] = {
        item_id: itemId,
        chance: chance
      };
      
      // Refresh editor
      editMonster(monsterId);
      unsavedChanges = true;
    }
    
    // Delete loot
    function deleteLoot(monsterId, lootIndex) {
      const monster = monsters.find(m => m.id === monsterId);
      
      if (!monster || !monster.loot || !monster.loot[lootIndex]) {
        alert('Loot not found');
        return;
      }
      
      if (confirm('Are you sure you want to delete this loot?')) {
        monster.loot.splice(lootIndex, 1);
        
        // Refresh editor
        editMonster(monsterId);
        unsavedChanges = true;
      }
    }
    
    // Create new monster
    function createNewMonster() {
      const id = prompt('Enter monster ID (no spaces, lowercase):');
      
      if (!id) {
        return;
      }
      
      // Check if ID already exists
      if (monsters.some(m => m.id === id)) {
        alert('A monster with that ID already exists.');
        return;
      }
      
      const newMonster = {
        id,
        name: prompt('Enter monster name:') || 'New Monster',
        description: prompt('Enter monster description:') || 'A fearsome creature.',
        image: prompt('Enter image URL:') || '/images/monsters/default.png',
        health: parseInt(prompt('Enter health:') || '10'),
        damage: parseInt(prompt('Enter damage:') || '2'),
        experience: parseInt(prompt('Enter experience reward:') || '5'),
        loot: []
      };
      
      monsters.push(newMonster);
      renderMonstersList();
      editMonster(id);
      unsavedChanges = true;
    }
    
    // Delete monster
    function deleteMonster(monsterId) {
      if (confirm(`Are you sure you want to delete the monster "${monsterId}"?`)) {
        const index = monsters.findIndex(m => m.id === monsterId);
        
        if (index !== -1) {
          monsters.splice(index, 1);
          renderMonstersList();
          monsterEditor.innerHTML = '<div class="editor-placeholder">Select a monster to edit</div>';
          monsterEditor.classList.remove('active');
          unsavedChanges = true;
        }
      }
    }
    
    // Save all monsters
    async function saveAllMonsters() {
      try {
        const response = await fetch('/api/admin/monsters/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ monsters })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Monsters saved successfully!');
          unsavedChanges = false;
        } else {
          alert(`Failed to save monsters: ${data.message}`);
        }
      } catch (error) {
        console.error('Error saving monsters:', error);
        alert(`Error saving monsters: ${error.message}`);
      }
    }
  });
</script>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .admin-header {
    margin-bottom: 30px;
    border-bottom: 2px solid #333;
    padding-bottom: 15px;
  }
  
  .admin-title {
    color: #50fa7b;
    font-size: 2.5em;
    margin-bottom: 5px;
  }
  
  .admin-nav ul {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0 0 20px 0;
    border-bottom: 1px solid #44475a;
  }
  
  .admin-nav li {
    margin-right: 10px;
  }
  
  .admin-nav a {
    display: block;
    padding: 10px 15px;
    text-decoration: none;
    color: #f8f8f2;
    border-radius: 4px 4px 0 0;
  }
  
  .admin-nav a.active {
    background-color: #44475a;
    color: #f8f8f2;
  }
  
  .admin-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
  }
  
  .action-bar {
    grid-column: 1 / -1;
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    gap: 10px;
  }
  
  .admin-btn {
    display: inline-block;
    padding: 8px 16px;
    background-color: #6272a4;
    color: #f8f8f2;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 14px;
  }
  
  .admin-btn:hover {
    background-color: #7b88ad;
  }
  
  .search-bar {
    flex-grow: 1;
    max-width: 300px;
  }
  
  .search-bar input {
    width: 100%;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #44475a;
    background-color: #282a36;
    color: #f8f8f2;
  }
  
  .monsters-list {
    background-color: #282a36;
    border-radius: 5px;
    padding: 15px;
    height: 600px;
    overflow-y: auto;
  }
  
  .monster-editor {
    background-color: #282a36;
    border-radius: 5px;
    padding: 15px;
    height: 600px;
    overflow-y: auto;
  }
  
  .list-item {
    padding: 10px;
    border-bottom: 1px solid #44475a;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .list-item:last-child {
    border-bottom: none;
  }
  
  .item-name {
    font-weight: bold;
    color: #f8f8f2;
    margin-bottom: 5px;
  }
  
  .item-meta {
    font-size: 0.9em;
    color: #6272a4;
  }
  
  .item-actions {
    display: flex;
    gap: 10px;
  }
  
  .edit-btn, .delete-btn {
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    border: none;
  }
  
  .edit-btn {
    background-color: #6272a4;
    color: #f8f8f2;
  }
  
  .delete-btn {
    background-color: #ff5555;
    color: #f8f8f2;
  }
  
  .editor-placeholder {
    text-align: center;
    color: #6272a4;
    padding: 50px 0;
  }
  
  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #44475a;
  }
  
  .editor-header h3 {
    margin: 0;
    color: #50fa7b;
  }
  
  .close-editor-btn {
    background: none;
    border: none;
    color: #ff5555;
    font-size: 24px;
    cursor: pointer;
  }
  
  .form-row {
    margin-bottom: 15px;
  }
  
  .form-row label {
    display: block;
    margin-bottom: 5px;
    color: #bd93f9;
  }
  
  .form-row input, .form-row textarea {
    width: 100%;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #44475a;
    background-color: #21222c;
    color: #f8f8f2;
  }
  
  .form-row textarea {
    resize: vertical;
  }
  
  .form-row input[readonly] {
    background-color: #191a21;
    cursor: not-allowed;
  }
  
  .stats-section, .loot-section {
    margin-top: 30px;
  }
  
  .stats-section h4, .loot-section h4 {
    color: #ff79c6;
    margin-bottom: 15px;
  }
  
  .loot-list {
    background-color: #21222c;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 15px;
    max-height: 200px;
    overflow-y: auto;
  }
  
  .loot-item {
    background-color: #282a36;
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .loot-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding-bottom: 5px;
    border-bottom: 1px solid #44475a;
    font-weight: bold;
    color: #f8f8f2;
  }
  
  .loot-actions {
    display: flex;
    gap: 10px;
  }
  
  .edit-loot-btn, .delete-loot-btn {
    padding: 3px 6px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 10px;
    border: none;
  }
  
  .edit-loot-btn {
    background-color: #6272a4;
    color: #f8f8f2;
  }
  
  .delete-loot-btn {
    background-color: #ff5555;
    color: #f8f8f2;
  }
  
  .loot-details {
    color: #6272a4;
    font-size: 0.9em;
  }
  
  .editor-actions {
    margin-top: 20px;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }
  
  .cancel-btn {
    background-color: #44475a;
    color: #f8f8f2;
    padding: 8px 16px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
  }
  
  .no-loot, .no-results, .loading, .error-message {
    text-align: center;
    padding: 20px;
    color: #6272a4;
  }
  
  .error-message {
    color: #ff5555;
  }
</style> 