<div class="admin-container">
  <div class="admin-header">
    <h2 class="admin-title">Location Management</h2>
    <p class="subtitle">Manage scavenge locations and their encounters</p>
  </div>

  <div class="admin-nav">
    <ul>
      <li><a href="/admin/dashboard">Dashboard</a></li>
      <li><a href="/admin/monsters">Monsters</a></li>
      <li><a href="/admin/items">Items</a></li>
      <li><a href="/admin/locations" class="active">Locations</a></li>
      <li><a href="/dashboard">Return to Game</a></li>
    </ul>
  </div>

  <div class="admin-content">
    <div class="action-bar">
      <button class="admin-btn" id="save-all-btn">Save All Changes</button>
      <button class="admin-btn" id="add-location-btn">Add New Location</button>
      <div class="search-bar">
        <input type="text" id="location-search" placeholder="Search locations...">
      </div>
    </div>

    <div class="locations-list" id="locations-list">
      <div class="loading">Loading locations...</div>
    </div>

    <div class="location-editor" id="location-editor">
      <div class="editor-placeholder">Select a location to edit</div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const locationsList = document.getElementById('locations-list');
    const locationEditor = document.getElementById('location-editor');
    const locationSearch = document.getElementById('location-search');
    const saveAllBtn = document.getElementById('save-all-btn');
    const addLocationBtn = document.getElementById('add-location-btn');
    
    let locations = [];
    let unsavedChanges = false;
    
    // Load locations
    try {
      const response = await fetch('/api/scavenge/locations');
      const data = await response.json();
      
      if (data.success && data.data) {
        locations = data.data.locations || [];
        renderLocationsList();
      } else {
        locationsList.innerHTML = '<div class="error-message">Failed to load locations</div>';
      }
    } catch (error) {
      console.error('Error loading locations:', error);
      locationsList.innerHTML = `<div class="error-message">Error loading locations: ${error.message}</div>`;
    }
    
    // Event listeners
    locationSearch.addEventListener('input', () => {
      renderLocationsList();
    });
    
    saveAllBtn.addEventListener('click', saveAllLocations);
    addLocationBtn.addEventListener('click', createNewLocation);
    
    // Handle unsaved changes
    window.addEventListener('beforeunload', (e) => {
      if (unsavedChanges) {
        e.preventDefault();
        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
        return e.returnValue;
      }
    });
    
    // Render locations list
    function renderLocationsList() {
      const searchTerm = locationSearch.value.toLowerCase();
      const filteredLocations = locations.filter(location => 
        location.name.toLowerCase().includes(searchTerm) || 
        location.id.toLowerCase().includes(searchTerm)
      );
      
      if (filteredLocations.length === 0) {
        locationsList.innerHTML = '<div class="no-results">No locations found</div>';
        return;
      }
      
      let html = '<div class="list-container">';
      
      filteredLocations.forEach(location => {
        html += `
          <div class="list-item" data-id="${location.id}">
            <div class="item-info">
              <div class="item-name">${location.name}</div>
              <div class="item-meta">ID: ${location.id} | Energy: ${location.energy_cost} | Min Level: ${location.min_level || 1}</div>
            </div>
            <div class="item-actions">
              <button class="edit-btn" data-id="${location.id}">Edit</button>
              <button class="delete-btn" data-id="${location.id}">Delete</button>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      locationsList.innerHTML = html;
      
      // Add event listeners to buttons
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const locationId = e.target.getAttribute('data-id');
          editLocation(locationId);
        });
      });
      
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const locationId = e.target.getAttribute('data-id');
          deleteLocation(locationId);
        });
      });
    }
    
    // Edit location
    function editLocation(locationId) {
      const location = locations.find(loc => loc.id === locationId);
      
      if (!location) {
        alert('Location not found');
        return;
      }
      
      let html = `
        <div class="editor-header">
          <h3>Editing Location: ${location.name}</h3>
          <button class="close-editor-btn">&times;</button>
        </div>
        <div class="editor-form">
          <div class="form-row">
            <label for="location-id">ID:</label>
            <input type="text" id="location-id" value="${location.id}" readonly>
          </div>
          <div class="form-row">
            <label for="location-name">Name:</label>
            <input type="text" id="location-name" value="${location.name}">
          </div>
          <div class="form-row">
            <label for="location-description">Description:</label>
            <textarea id="location-description" rows="3">${location.description}</textarea>
          </div>
          <div class="form-row">
            <label for="location-image">Image URL:</label>
            <input type="text" id="location-image" value="${location.image}">
          </div>
          <div class="form-row">
            <label for="location-energy">Energy Cost:</label>
            <input type="number" id="location-energy" value="${location.energy_cost}" min="1">
          </div>
          <div class="form-row">
            <label for="location-level">Min Level:</label>
            <input type="number" id="location-level" value="${location.min_level || 1}" min="1">
          </div>
        </div>
        
        <div class="encounters-section">
          <h4>Encounters</h4>
          <div class="encounters-list" id="encounters-list">
      `;
      
      // Add encounters
      if (location.encounters && location.encounters.length > 0) {
        location.encounters.forEach((encounter, index) => {
          html += `
            <div class="encounter-item" data-index="${index}">
              <div class="encounter-header">
                <span>${encounter.type === 'monster' ? encounter.name : 'Item Encounter'}</span>
                <div class="encounter-actions">
                  <button class="edit-encounter-btn" data-index="${index}">Edit</button>
                  <button class="delete-encounter-btn" data-index="${index}">Delete</button>
                </div>
              </div>
              <div class="encounter-details">
                <div>Type: ${encounter.type}</div>
                <div>Chance: ${encounter.chance}%</div>
              </div>
            </div>
          `;
        });
      } else {
        html += '<div class="no-encounters">No encounters defined</div>';
      }
      
      html += `
          </div>
          <button class="admin-btn" id="add-encounter-btn">Add Encounter</button>
        </div>
        
        <div class="editor-actions">
          <button class="admin-btn" id="save-location-btn">Save Changes</button>
          <button class="cancel-btn" id="cancel-edit-btn">Cancel</button>
        </div>
      `;
      
      locationEditor.innerHTML = html;
      locationEditor.classList.add('active');
      
      // Add event listeners
      document.querySelector('.close-editor-btn').addEventListener('click', () => {
        if (unsavedChanges) {
          if (confirm('You have unsaved changes. Discard them?')) {
            locationEditor.classList.remove('active');
            unsavedChanges = false;
          }
        } else {
          locationEditor.classList.remove('active');
        }
      });
      
      document.getElementById('cancel-edit-btn').addEventListener('click', () => {
        if (unsavedChanges) {
          if (confirm('You have unsaved changes. Discard them?')) {
            locationEditor.classList.remove('active');
            unsavedChanges = false;
          }
        } else {
          locationEditor.classList.remove('active');
        }
      });
      
      document.getElementById('save-location-btn').addEventListener('click', () => {
        saveLocationChanges(locationId);
      });
      
      document.getElementById('add-encounter-btn').addEventListener('click', () => {
        addEncounter(locationId);
      });
      
      // Form change detection
      document.querySelectorAll('.editor-form input, .editor-form textarea').forEach(input => {
        input.addEventListener('input', () => {
          unsavedChanges = true;
        });
      });
      
      // Edit encounter buttons
      document.querySelectorAll('.edit-encounter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const index = parseInt(e.target.getAttribute('data-index'));
          editEncounter(locationId, index);
        });
      });
      
      // Delete encounter buttons
      document.querySelectorAll('.delete-encounter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const index = parseInt(e.target.getAttribute('data-index'));
          deleteEncounter(locationId, index);
        });
      });
    }
    
    // Save location changes
    function saveLocationChanges(locationId) {
      const location = locations.find(loc => loc.id === locationId);
      
      if (!location) {
        alert('Location not found');
        return;
      }
      
      // Get updated values
      location.name = document.getElementById('location-name').value;
      location.description = document.getElementById('location-description').value;
      location.image = document.getElementById('location-image').value;
      location.energy_cost = parseInt(document.getElementById('location-energy').value);
      location.min_level = parseInt(document.getElementById('location-level').value);
      
      // Update UI
      renderLocationsList();
      unsavedChanges = true;
      alert('Location updated! Remember to click "Save All Changes" to persist your changes.');
    }
    
    // Add encounter
    function addEncounter(locationId) {
      const location = locations.find(loc => loc.id === locationId);
      
      if (!location) {
        alert('Location not found');
        return;
      }
      
      const encounterType = prompt('Enter encounter type (monster or item):');
      
      if (!encounterType || (encounterType !== 'monster' && encounterType !== 'item')) {
        alert('Invalid encounter type. Must be "monster" or "item".');
        return;
      }
      
      if (!location.encounters) {
        location.encounters = [];
      }
      
      if (encounterType === 'monster') {
        const newEncounter = {
          type: 'monster',
          id: prompt('Enter monster ID:') || `monster_${Date.now()}`,
          name: prompt('Enter monster name:') || 'New Monster',
          chance: parseInt(prompt('Enter encounter chance (1-100):') || '50'),
          health: parseInt(prompt('Enter monster health:') || '10'),
          damage: parseInt(prompt('Enter monster damage:') || '2'),
          experience: parseInt(prompt('Enter experience reward:') || '5'),
          loot: []
        };
        
        // Add some loot
        if (confirm('Add loot to the monster?')) {
          const lootItemId = prompt('Enter item ID for loot:');
          const lootChance = parseInt(prompt('Enter loot chance (1-100):') || '70');
          
          if (lootItemId) {
            newEncounter.loot.push({
              item_id: lootItemId,
              chance: lootChance
            });
          }
        }
        
        location.encounters.push(newEncounter);
      } else {
        // Item encounter
        const newEncounter = {
          type: 'item',
          chance: parseInt(prompt('Enter encounter chance (1-100):') || '50'),
          items: []
        };
        
        // Add an item
        const itemId = prompt('Enter item ID:');
        const itemChance = parseInt(prompt('Enter item chance (1-100):') || '70');
        
        if (itemId) {
          newEncounter.items.push({
            item_id: itemId,
            chance: itemChance
          });
        }
        
        location.encounters.push(newEncounter);
      }
      
      // Refresh editor
      editLocation(locationId);
      unsavedChanges = true;
    }
    
    // Edit encounter
    function editEncounter(locationId, encounterIndex) {
      const location = locations.find(loc => loc.id === locationId);
      
      if (!location || !location.encounters || !location.encounters[encounterIndex]) {
        alert('Encounter not found');
        return;
      }
      
      const encounter = location.encounters[encounterIndex];
      
      if (encounter.type === 'monster') {
        encounter.name = prompt('Enter monster name:', encounter.name) || encounter.name;
        encounter.chance = parseInt(prompt('Enter encounter chance (1-100):', encounter.chance) || encounter.chance);
        encounter.health = parseInt(prompt('Enter monster health:', encounter.health) || encounter.health);
        encounter.damage = parseInt(prompt('Enter monster damage:', encounter.damage) || encounter.damage);
        encounter.experience = parseInt(prompt('Enter experience reward:', encounter.experience) || encounter.experience);
        
        // Edit loot
        if (confirm('Edit monster loot?')) {
          if (!encounter.loot) {
            encounter.loot = [];
          }
          
          const lootItemId = prompt('Enter item ID for loot:', encounter.loot[0]?.item_id || '');
          const lootChance = parseInt(prompt('Enter loot chance (1-100):', encounter.loot[0]?.chance || '70'));
          
          if (lootItemId) {
            if (encounter.loot.length > 0) {
              encounter.loot[0] = {
                item_id: lootItemId,
                chance: lootChance
              };
            } else {
              encounter.loot.push({
                item_id: lootItemId,
                chance: lootChance
              });
            }
          }
        }
      } else {
        // Item encounter
        encounter.chance = parseInt(prompt('Enter encounter chance (1-100):', encounter.chance) || encounter.chance);
        
        // Edit items
        if (confirm('Edit encounter items?')) {
          if (!encounter.items) {
            encounter.items = [];
          }
          
          const itemId = prompt('Enter item ID:', encounter.items[0]?.item_id || '');
          const itemChance = parseInt(prompt('Enter item chance (1-100):', encounter.items[0]?.chance || '70'));
          
          if (itemId) {
            if (encounter.items.length > 0) {
              encounter.items[0] = {
                item_id: itemId,
                chance: itemChance
              };
            } else {
              encounter.items.push({
                item_id: itemId,
                chance: itemChance
              });
            }
          }
        }
      }
      
      // Refresh editor
      editLocation(locationId);
      unsavedChanges = true;
    }
    
    // Delete encounter
    function deleteEncounter(locationId, encounterIndex) {
      const location = locations.find(loc => loc.id === locationId);
      
      if (!location || !location.encounters || !location.encounters[encounterIndex]) {
        alert('Encounter not found');
        return;
      }
      
      if (confirm('Are you sure you want to delete this encounter?')) {
        location.encounters.splice(encounterIndex, 1);
        
        // Refresh editor
        editLocation(locationId);
        unsavedChanges = true;
      }
    }
    
    // Create new location
    function createNewLocation() {
      const id = prompt('Enter location ID (no spaces, lowercase):');
      
      if (!id) {
        return;
      }
      
      // Check if ID already exists
      if (locations.some(loc => loc.id === id)) {
        alert('A location with that ID already exists.');
        return;
      }
      
      const newLocation = {
        id,
        name: prompt('Enter location name:') || 'New Location',
        description: prompt('Enter location description:') || 'A new scavenging location.',
        image: prompt('Enter image URL:') || '/images/default-location.jpg',
        energy_cost: parseInt(prompt('Enter energy cost:') || '5'),
        min_level: parseInt(prompt('Enter minimum level:') || '1'),
        encounters: []
      };
      
      locations.push(newLocation);
      renderLocationsList();
      editLocation(id);
      unsavedChanges = true;
    }
    
    // Delete location
    function deleteLocation(locationId) {
      if (confirm(`Are you sure you want to delete the location "${locationId}"?`)) {
        const index = locations.findIndex(loc => loc.id === locationId);
        
        if (index !== -1) {
          locations.splice(index, 1);
          renderLocationsList();
          locationEditor.innerHTML = '<div class="editor-placeholder">Select a location to edit</div>';
          locationEditor.classList.remove('active');
          unsavedChanges = true;
        }
      }
    }
    
    // Save all locations
    async function saveAllLocations() {
      try {
        // Replace this with your actual endpoint
        const response = await fetch('/api/admin/locations/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ locations })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Locations saved successfully!');
          unsavedChanges = false;
        } else {
          alert(`Failed to save locations: ${data.message}`);
        }
      } catch (error) {
        console.error('Error saving locations:', error);
        alert(`Error saving locations: ${error.message}`);
      }
    }
  });
</script>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .admin-header {
    margin-bottom: 30px;
    border-bottom: 2px solid #333;
    padding-bottom: 15px;
  }
  
  .admin-title {
    color: #50fa7b;
    font-size: 2.5em;
    margin-bottom: 5px;
  }
  
  .admin-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
  }
  
  .action-bar {
    grid-column: 1 / -1;
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    gap: 10px;
  }
  
  .admin-btn {
    display: inline-block;
    padding: 8px 16px;
    background-color: #6272a4;
    color: #f8f8f2;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 14px;
  }
  
  .admin-btn:hover {
    background-color: #7b88ad;
  }
  
  .search-bar {
    flex-grow: 1;
    max-width: 300px;
  }
  
  .search-bar input {
    width: 100%;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #44475a;
    background-color: #282a36;
    color: #f8f8f2;
  }
  
  .locations-list {
    background-color: #282a36;
    border-radius: 5px;
    padding: 15px;
    height: 600px;
    overflow-y: auto;
  }
  
  .location-editor {
    background-color: #282a36;
    border-radius: 5px;
    padding: 15px;
    height: 600px;
    overflow-y: auto;
  }
  
  .list-item {
    padding: 10px;
    border-bottom: 1px solid #44475a;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .list-item:last-child {
    border-bottom: none;
  }
  
  .item-name {
    font-weight: bold;
    color: #f8f8f2;
    margin-bottom: 5px;
  }
  
  .item-meta {
    font-size: 0.9em;
    color: #6272a4;
  }
  
  .item-actions {
    display: flex;
    gap: 10px;
  }
  
  .edit-btn, .delete-btn {
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    border: none;
  }
  
  .edit-btn {
    background-color: #6272a4;
    color: #f8f8f2;
  }
  
  .delete-btn {
    background-color: #ff5555;
    color: #f8f8f2;
  }
  
  .editor-placeholder {
    text-align: center;
    color: #6272a4;
    padding: 50px 0;
  }
  
  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #44475a;
  }
  
  .editor-header h3 {
    margin: 0;
    color: #50fa7b;
  }
  
  .close-editor-btn {
    background: none;
    border: none;
    color: #ff5555;
    font-size: 24px;
    cursor: pointer;
  }
  
  .form-row {
    margin-bottom: 15px;
  }
  
  .form-row label {
    display: block;
    margin-bottom: 5px;
    color: #bd93f9;
  }
  
  .form-row input, .form-row textarea {
    width: 100%;
    padding: 8px;
    border-radius: 4px;
    border: 1px solid #44475a;
    background-color: #21222c;
    color: #f8f8f2;
  }
  
  .form-row textarea {
    resize: vertical;
  }
  
  .form-row input[readonly] {
    background-color: #191a21;
    cursor: not-allowed;
  }
  
  .encounters-section {
    margin-top: 30px;
  }
  
  .encounters-section h4 {
    color: #ff79c6;
    margin-bottom: 15px;
  }
  
  .encounters-list {
    background-color: #21222c;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 15px;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .encounter-item {
    background-color: #282a36;
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .encounter-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding-bottom: 5px;
    border-bottom: 1px solid #44475a;
    font-weight: bold;
    color: #f8f8f2;
  }
  
  .encounter-actions {
    display: flex;
    gap: 10px;
  }
  
  .edit-encounter-btn, .delete-encounter-btn {
    padding: 3px 6px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 10px;
    border: none;
  }
  
  .edit-encounter-btn {
    background-color: #6272a4;
    color: #f8f8f2;
  }
  
  .delete-encounter-btn {
    background-color: #ff5555;
    color: #f8f8f2;
  }
  
  .encounter-details {
    color: #6272a4;
    font-size: 0.9em;
  }
  
  .editor-actions {
    margin-top: 20px;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }
  
  .cancel-btn {
    background-color: #44475a;
    color: #f8f8f2;
    padding: 8px 16px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
  }
  
  .no-encounters, .no-results, .loading, .error-message {
    text-align: center;
    padding: 20px;
    color: #6272a4;
  }
  
  .error-message {
    color: #ff5555;
  }
</style> 