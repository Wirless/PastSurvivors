<div class="admin-container">
  <div class="admin-header">
    <h2 class="admin-title">Admin Dashboard</h2>
    <p class="subtitle">Manage game content and entities</p>
  </div>

  <div class="admin-nav">
    <ul>
      <li><a href="/admin/dashboard" class="active">Dashboard</a></li>
      <li><a href="/admin/monsters">Monsters</a></li>
      <li><a href="/admin/items">Items</a></li>
      <li><a href="/admin/locations">Locations</a></li>
      <li><a href="/dashboard">Return to Game</a></li>
    </ul>
  </div>

  <div class="admin-content">
    <div class="admin-dashboard-stats">
      <div class="stat-card">
        <h3>Monsters</h3>
        <div class="stat-value" id="monster-count">--</div>
        <a href="/admin/monsters" class="admin-btn">Manage</a>
      </div>
      
      <div class="stat-card">
        <h3>Items</h3>
        <div class="stat-value" id="item-count">--</div>
        <a href="/admin/items" class="admin-btn">Manage</a>
      </div>
      
      <div class="stat-card">
        <h3>Locations</h3>
        <div class="stat-value" id="location-count">--</div>
        <a href="/admin/locations" class="admin-btn">Manage</a>
      </div>
      
      <div class="stat-card">
        <h3>Players</h3>
        <div class="stat-value" id="player-count">--</div>
        <a href="#" class="admin-btn disabled">View</a>
      </div>
    </div>
    
    <div class="admin-quick-actions">
      <h3>Quick Actions</h3>
      <div class="action-grid">
        <button class="admin-btn" id="create-monster-btn">Create Monster</button>
        <button class="admin-btn" id="create-item-btn">Create Item</button>
        <button class="admin-btn" id="create-location-btn">Create Location</button>
        <button class="admin-btn" id="reload-cache-btn">Reload Cache</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Load counts
    try {
      // Monsters
      fetch('/api/scavenge/locations')
        .then(res => res.json())
        .then(data => {
          if (data.success && data.data.locations) {
            document.getElementById('location-count').textContent = data.data.locations.length;
            
            // Count unique monsters across all locations
            const monsters = new Set();
            data.data.locations.forEach(location => {
              location.encounters
                .filter(encounter => encounter.type === 'monster')
                .forEach(monster => monsters.add(monster.id));
            });
            
            document.getElementById('monster-count').textContent = monsters.size;
          }
        });
      
      // Items
      fetch('/api/inventory/items')
        .then(res => res.json())
        .then(data => {
          if (data.success && Array.isArray(data.data)) {
            document.getElementById('item-count').textContent = data.data.length;
          }
        });
        
      // Players (users with characters)
      fetch('/api/admin/stats')
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            document.getElementById('player-count').textContent = data.data.playerCount || '--';
          }
        })
        .catch(() => { /* Ignore errors */ });
    } catch (error) {
      console.error('Error loading admin stats:', error);
    }
    
    // Button handlers
    document.getElementById('create-monster-btn').addEventListener('click', () => {
      window.location.href = '/admin/monsters/create';
    });
    
    document.getElementById('create-item-btn').addEventListener('click', () => {
      window.location.href = '/admin/items/create';
    });
    
    document.getElementById('create-location-btn').addEventListener('click', () => {
      window.location.href = '/admin/locations/create';
    });
    
    document.getElementById('reload-cache-btn').addEventListener('click', async () => {
      try {
        const response = await fetch('/api/admin/reload-cache', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Cache reloaded successfully!');
        } else {
          alert('Failed to reload cache: ' + data.message);
        }
      } catch (error) {
        console.error('Error reloading cache:', error);
        alert('An error occurred while reloading cache');
      }
    });
  });
</script>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .admin-header {
    margin-bottom: 30px;
    border-bottom: 2px solid #333;
    padding-bottom: 15px;
  }
  
  .admin-title {
    color: #50fa7b;
    font-size: 2.5em;
    margin-bottom: 5px;
  }
  
  .admin-nav {
    margin-bottom: 30px;
  }
  
  .admin-nav ul {
    list-style: none;
    display: flex;
    padding: 0;
    margin: 0;
    background-color: #282a36;
    border-radius: 5px;
    overflow: hidden;
  }
  
  .admin-nav li {
    flex-grow: 1;
    text-align: center;
  }
  
  .admin-nav a {
    display: block;
    padding: 15px;
    color: #f8f8f2;
    text-decoration: none;
    transition: background-color 0.2s;
  }
  
  .admin-nav a:hover {
    background-color: #44475a;
  }
  
  .admin-nav a.active {
    background-color: #50fa7b;
    color: #282a36;
    font-weight: bold;
  }
  
  .admin-dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .stat-card {
    background-color: #282a36;
    border-radius: 5px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .stat-card h3 {
    margin-top: 0;
    color: #bd93f9;
    font-size: 1.2em;
  }
  
  .stat-value {
    font-size: 3em;
    font-weight: bold;
    color: #f8f8f2;
    margin: 10px 0;
  }
  
  .admin-btn {
    display: inline-block;
    padding: 8px 16px;
    background-color: #6272a4;
    color: #f8f8f2;
    text-decoration: none;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 14px;
  }
  
  .admin-btn:hover {
    background-color: #7b88ad;
  }
  
  .admin-btn.disabled {
    background-color: #44475a;
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  .admin-quick-actions {
    background-color: #282a36;
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .admin-quick-actions h3 {
    margin-top: 0;
    color: #ff79c6;
    font-size: 1.5em;
    margin-bottom: 15px;
  }
  
  .action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
  }
</style> 